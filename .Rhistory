for(p in c(1,2)){
for(q in c(1,2)){
for(d in c(1)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 7){
model <- Arima(assault_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
kable(temp[which.min(temp$AIC),])
kable(temp[which.min(temp$BIC),])
kable(temp[which.min(temp$AICc),])
set.seed(621)
model_output <- capture.output(sarima(assault_ts, 1, 1, 1, 1, 1, 1, 12))
auto_model <- auto.arima(assault_ts)
auto_model
model_fit <- Arima(assault_ts, order = c(1, 1, 1), seasonal = c(1, 1, 1))
plot(assault_ts, col = "blue")
lines(fitted(model_fit), col = "green")
lines(fitted(auto_model), col = "red")
legend(x = "topright", legend = c("assault_ts", "fit1", "fit2"), fill = 4:1)
model_fit <- Arima(assault_ts, order = c(1, 1, 1), seasonal = c(1, 1, 1))
plot(assault_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("assault_ts", "fit1"), fill = 4:1)
autoplot(assault_ts) +
autolayer(meanf(assault_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(assault_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(assault_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(assault_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
accuracy(snaive(assault_ts, h = 36))
summary(model_fit)
summary(auto_model)
model_fit %>% forecast %>% autoplot()
ggtsdisplay(controlled_pos_ts)
controlled_pos_ts %>% diff %>% ggtsdisplay()
controlled_pos_ts %>% diff(12) %>% ggtsdisplay()
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*25), nrow=25)
for(p in c(1,2)){
for(q in c(1,2)){
for(d in c(1)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 9){
model <- Arima(controlled_pos_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*23), nrow=23)
for(p in c(1,2)){
for(q in c(1,2)){
for(d in c(1)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q <= 9){
model <- Arima(controlled_pos_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
set.seed(621)
model_output <- capture.output(sarima(controlled_pos_ts, 1, 1, 1, 1, 1, 1, 12))
auto_model <- auto.arima(controlled_pos_ts)
auto_model
model_fit <- Arima(controlled_pos_ts, order = c(1, 1, 1), seasonal = c(1, 1, 1))
plot(controlled_pos_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("controlled_pos_ts", "fit1"), fill = 4:1)
autoplot(controlled_pos_ts) +
autolayer(meanf(controlled_pos_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(controlled_pos_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(controlled_pos_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(controlled_pos_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
accuracy(snaive(controlled_pos_ts, h = 36))
summary(model_fit)
summary(auto_model)
model_fit %>% forecast %>% autoplot()
ggtsdisplay(marijuana_pos_ts)
marijuana_pos_ts %>% diff %>% ggtsdisplay()
marijuana_pos_ts %>% diff() %>% diff() %>% ggtsdisplay()
marijuana_pos_ts %>% diff(12) %>% ggtsdisplay()
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*22), nrow=22)
for(p in c(1,2,4)){
for(q in c(1,4)){
for(d in c(1,2)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 7){
model <- Arima(marijuana_pos_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*22), nrow=22)
for(p in c(1,2,4)){
for(q in c(1,4)){
for(d in c(1,2)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 9){
model <- Arima(marijuana_pos_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*30), nrow=30)
for(p in c(1,2,4)){
for(q in c(1,4)){
for(d in c(1,2)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 9){
model <- Arima(marijuana_pos_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*40), nrow=40)
for(p in c(1,2,4)){
for(q in c(1,4)){
for(d in c(1,2)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 9){
model <- Arima(marijuana_pos_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*32), nrow=32)
for(p in c(1,2,4)){
for(q in c(1,4)){
for(d in c(1,2)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 9){
model <- Arima(marijuana_pos_ts, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
set.seed(621)
model_output <- capture.output(sarima(marijuana_pos_ts, 1, 1, 1, 1, 1, 1, 12))
auto_model <- auto.arima(marijuana_pos_ts)
auto_model
model_fit <- Arima(marijuana_pos_ts, order = c(1, 1, 1), seasonal = c(1, 1, 1))
plot(marijuana_pos_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("marijuana_pos_ts", "fit1"), fill = 4:1)
autoplot(marijuana_pos_ts) +
autolayer(meanf(marijuana_pos_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(marijuana_pos_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(marijuana_pos_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(marijuana_pos_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
accuracy(snaive(marijuana_pos_ts, h = 36))
summary(model_fit)
summary(auto_model)
model_fit %>% forecast %>% autoplot()
ggtsdisplay(motor_theft_ts)
motor_theft_ts %>% diff %>% ggtsdisplay()
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*32), nrow=32)
for(p in c(1,2){
for(p in c(1,2)){
for(q in c(1,3)){
for(d in c(0,1)){
if(p + d + q <= 8){
model <- Arima(motor_theft_ts, order = c(p, d, q))
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*9), nrow=9)
for(p in c(1,2)){
for(q in c(1,3)){
for(d in c(0,1)){
if(p + d + q <= 8){
model <- Arima(motor_theft_ts, order = c(p, d, q))
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*9), nrow=9)
for(p in c(1,2)){
for(q in c(1,3)){
for(d in c(0,1)){
if(p + d + q <= 8){
model <- Arima(motor_theft_ts, order = c(p, d, q))
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q", "AIC","BIC","AICc")
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*8), nrow=8)
for(p in c(1,2)){
for(q in c(1,3)){
for(d in c(0,1)){
if(p + d + q <= 8){
model <- Arima(motor_theft_ts, order = c(p, d, q))
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q", "AIC","BIC","AICc")
set.seed(621)
model_output <- capture.output(arima(motor_theft_ts, 2, 1, 3))
set.seed(621)
model_output <- capture.output(arima(motor_theft_ts, order = (2, 1, 3)))
set.seed(621)
model_output <- capture.output(sarima(motor_theft_ts, 2, 1, 3))
auto_model <- auto.arima(motor_theft_ts)
auto_model
model_fit <- Arima(motor_theft_ts, order = c(1, 1, 1), seasonal = c(1, 1, 1))
plot(motor_theft_ts, col = "blue")
lines(fitted(model_fit), col = "green")
lines(fitted(auto_model), col = "red")
legend(x = "topright", legend = c("motor_theft_ts", "fit1"), fill = 4:1)
legend(x = "topright", legend = c("motor_theft_ts", "fit1", "auto_fit"), fill = 4:1)
model_fit <- Arima(motor_theft_ts, order = c(1, 1, 1), seasonal = c(1, 1, 1))
plot(motor_theft_ts, col = "blue")
lines(fitted(model_fit), col = "green")
lines(fitted(auto_model), col = "red")
legend(x = "topright", legend = c("motor_theft_ts", "fit1", "auto_fit"), fill = 4:1)
autoplot(motor_theft_ts) +
autolayer(meanf(motor_theft_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(motor_theft_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(motor_theft_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(motor_theft_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
autolayer(forecast(auto_fit, 36),
series = "Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
autoplot(motor_theft_ts) +
autolayer(meanf(motor_theft_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(motor_theft_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(motor_theft_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(motor_theft_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
autolayer(forecast(auto_model, 36),
series = "Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
autoplot(motor_theft_ts) +
autolayer(meanf(motor_theft_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(motor_theft_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(motor_theft_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(motor_theft_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
autolayer(forecast(auto_model, 36),
series = "Auto Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
accuracy(snaive(motor_theft_ts, h = 36))
summary(model_fit)
summary(auto_model)
model_fit <- Arima(motor_theft_ts, order = c(2, 1, 3))
plot(motor_theft_ts, col = "blue")
lines(fitted(model_fit), col = "green")
lines(fitted(auto_model), col = "red")
legend(x = "topright", legend = c("motor_theft_ts", "fit1", "auto_fit"), fill = 4:1)
autoplot(motor_theft_ts) +
autolayer(meanf(motor_theft_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(motor_theft_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(motor_theft_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(motor_theft_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
autolayer(forecast(auto_model, 36),
series = "Auto Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
accuracy(snaive(motor_theft_ts, h = 36))
summary(model_fit)
summary(auto_model)
auto_model %>% forecast %>% autoplot()
model_fit %>% forecast %>% autoplot()
auto_model %>% forecast %>% autoplot()
ggtsdisplay(murder_ts)
murder_ts %>% diff %>% ggtsdisplay()
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*8), nrow=8)
for(p in c(1)){
for(q in c(1,2)){
for(d in c(0,1)){
if(p + d + q <= 8){
model <- Arima(murder_ts, order = c(p, d, q))
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q", "AIC","BIC","AICc")
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*4), nrow=4)
for(p in c(1)){
for(q in c(1,2)){
for(d in c(0,1)){
if(p + d + q <= 8){
model <- Arima(murder_ts, order = c(p, d, q))
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i + 1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q", "AIC","BIC","AICc")
set.seed(621)
model_output <- capture.output(sarima(murder_ts, 1, 1, 2))
auto_model <- auto.arima(murder_ts)
auto_model
model_fit <- Arima(murder_ts, order = c(1, 1, 2))
plot(murder_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("murder_ts", "fit1"), fill = 4:1)
autoplot(murder_ts) +
autolayer(meanf(murder_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(murder_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(murder_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(murder_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
accuracy(snaive(murder_ts, h = 36))
summary(model_fit)
model_fit %>% forecast %>% autoplot()
model_fit <- Arima(murder_ts, order = c(1, 1, 2))
plot(murder_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("murder_ts", "fit1"), fill = 4:1)
model_fit <- Arima(murder_ts, order = c(1, 1, 2))
plot(murder_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topleft", legend = c("murder_ts", "fit1"), fill = 4:1)
autoplot(murder_ts) +
autolayer(meanf(murder_ts, h = 36),
series = "Mean", PI = FALSE) +
autolayer(naive(murder_ts, h = 36),
series = "Naïve", PI = FALSE) +
autolayer(snaive(murder_ts, h = 36),
series = "SNaïve", PI = FALSE) +
autolayer(rwf(murder_ts, h = 36, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(forecast(model_fit, 36),
series = "Fit", PI = FALSE) +
guides(color = guide_legend(title = "Forecast"))
accuracy(snaive(murder_ts, h = 36))
summary(model_fit)
model_fit %>% forecast %>% autoplot()
auto_fit %>% forecast %>% autoplot()
auto_model %>% forecast %>% autoplot()
auto_fit %>% forecast %>% autoplot()
model_fit %>% forecast %>% autoplot()
library(reticulate)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(forecast)
library(TSstudio)
library(tseries)
library(gridExtra)
library(kableExtra)
library(astsa)
load("arrests_ts.Rdata")
model_fit %>% forecast %>% autoplot()
ggtsdisplay(assault_ts)
model_fit <- Arima(assault_ts, order = c(1, 1, 1), seasonal = c(1, 1, 1))
plot(assault_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("assault_ts", "fit1"), fill = 4:1)
model_fit %>% forecast %>% autoplot()
