b= 12*i
tryCatch({
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
})
}
#| code-fold: true
#| code-summary: Plot Results
yr = rep(c(2012:2022),each =12) #year
m = rep(paste0(1:12),11) #month
rmse1 <- data.frame(yr,m,rmse1)
rmse1$date <- as.Date(paste(rmse1$yr, rmse1$m, "01", sep = "-"))
names(rmse1) <- c("Year", "Month","controlled","marijuana", "Date")
rmse2 <- data.frame(yr,m,rmse2)
rmse2$date <- as.Date(paste(rmse2$yr, rmse2$m, "01", sep = "-"))
names(rmse2) <- c("Year", "Month","controlled","marijuana", "Date")
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = controlled),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = controlled),color = "red") +
labs(
title = "CV RMSE for controlled substance possession",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = marijuana),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = marijuana),color = "red") +
labs(
title = "CV RMSE for marijuana possession",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit"))) +
theme(
legend.position = "top",  # Adjust legend position (options: top, bottom, left, right)
legend.title = element_text(color = "green", size = 12, face = "italic")  # Customize legend title appearance
)
mean(rmse1$controlled)
mean(rmse2$controlled)
mean(rmse1$marijuana)
mean(rmse2$marijuana)
#| code-fold: true
fit <- VAR(ts, p = 6, type = "both")
plot(forecast(fit, 24))
#| code-fold: true
#| code-summary: Imports
library(plotly)
library(caret)
library(car)
library(ggplot2)
library(forecast)
library(gridExtra)
library(tseries)
library(quantmod)
library(fGarch)
library(FinTS)
cat("AIC", min(ARCH_AIC))
#| code-fold: true
library(vars)
library(reticulate)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(forecast)
library(TSstudio)
library(tseries)
library(gridExtra)
library(kableExtra)
library(astsa)
load("data/unrate.Rdata")
load("data/arrest_data.Rdata")
load("data/arrests_ts.Rdata")
#| code-fold: true
unrate_ts <- ts(df$unrate, start = c(2006, 1), frequency = 12)
#| code-fold: true
month <- as.Date(arrests_by_crime$month)
dd <- data.frame(month, arrests = arrests_ts, unrate = unrate_ts) %>%
rename(arrests = Series.1)
kable(head(dd))
#| code-fold: true
dd.ts <- ts(dd, start = c(2006, 1), frequency = 12)
autoplot(dd.ts[,c(2,3)], facets = TRUE) +
xlab("Year") + ylab("") +
ggtitle("Variables influencing Arrests in NYC")
#| code-fold: true
xreg <- cbind(unrate = dd.ts[,"unrate"])
auto_model <- auto.arima(dd.ts[,"arrests"], xreg = xreg)
summary(auto_model)
checkresiduals(auto_model)
fit.reg <- lm(arrests ~ unrate, data = dd)
summary(fit.reg)
res.fit <- ts(residuals(fit.reg), start = c(2006, 1), frequency = 12)
ggtsdisplay(res.fit)
ggtsdisplay(res.fit %>% diff())
ggtsdisplay(res.fit %>% diff() %>% diff(12))
#| code-fold: true
#| code-summary: Fitting Model
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*28), nrow=28)
for(p in c(1,4)){
for(q in c(1,4)){
for(d in c(0,1)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 9){
tryCatch({
model <- Arima(res.fit, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
}, error = function(err) {
cat()
}, finally = {
i <- i + 1
})
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
#| layout-ncol: 6
#| code-fold: true
kable(temp[which.min(temp$AIC),], digits = 2)
kable(temp[which.min(temp$BIC),], digits = 2)
kable(temp[which.min(temp$AICc),], digits = 2)
#| code-fold: true
set.seed(621)
model_output <- capture.output(sarima(res.fit, 1, 1, 1, 1, 1, 3, 12))
#| code-fold: true
model_fit <- Arima(res.fit, order = c(1, 1, 1), seasonal = c(1, 1, 3))
plot(res.fit, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("res.fit", "fit1"), fill = 4:1)
#| code-fold: true
# minimum data length for fitting
k <- 48
n <- length(res.fit)
st <- tsp(res.fit)[1] + (k - 2)/12 # ending point: October 2009
rmse1 <- matrix(NA,n-k,12)
rmse2 <- matrix(NA,n-k,12)
for(i in seq(10, n - k, by = 5)) {
tryCatch({
xtrain <- window(res.fit, end = st + i/12)
xtest <- window(res.fit, start = st + (i + 1)/12, end = st + (i + 12)/12)
fit1 <- Arima(xtrain,
order = c(1, 1, 1),
seasonal = c(1, 1, 3),
method = "ML")
fcast1 <- forecast(fit1, h = 12)
fit2 <- Arima(xtrain,
order = c(0, 1, 2),
seasonal = c(2, 0, 0),
method = "ML")
fcast2 <- forecast(fit2, h = 12)
rmse1[i, 1:length(xtest)] <- sqrt((fcast1$mean-xtest)^2)
rmse2[i, 1:length(xtest)] <- sqrt((fcast2$mean-xtest)^2)
}, error = function(err) {
cat()
})
}
plot(1:12, colMeans(rmse1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="RMSE")
lines(1:12, colMeans(rmse2,na.rm=TRUE), type="l", col=3, xlab="horizon", ylab="RMSE2")
legend("topleft",legend=c("manual fit","auto fit"),col=2:3,lty=1)
summary(model_fit)
#| code-fold: true
model_fit %>% forecast %>% autoplot()
#| code-fold: true
model_fit <- Arima(arrests_ts, order = c(1, 1, 1), seasonal = c(1, 1, 3), xreg = unrate_ts)
#| code-fold: true
model_fit <- Arima(arrests_ts, order = c(1, 1, 1), seasonal = c(1, 1, 3), xreg = unrate_ts)
plot(arrests_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("res.fit", "fit1"), fill = 4:1)
summary(model_fit)
#| code-fold: true
model_fit %>% forecast %>% autoplot()
#| code-fold: true
model_fit %>% forecast %>% autoplot(xreg = unrate_ts.forecast$mean)
unrate_ts.forecast
unrate_forecast <- forecast(auto.arima(unrate_ts))
model_fit %>% forecast %>% autoplot(xreg = unrate_forecast$mean)
autoplot(forecast(model_fit, xreg = unrate_forecast$mean))
#| code-fold: true
month <- as.Date(arrests_by_date$month)
dd <- data.frame(month, arrests = arrests_ts) %>%
rename(arrests = Series.1)
election_years <- c(2021, 2017, 2013, 2009)
dd <- dd %>%
mutate(election = if_else(year(month) %in% election_years, 1, 0))
kable(head(dd))
#| code-fold: true
dd.ts <- ts(dd, start = c(2006, 1), frequency = 12)
autoplot(dd.ts[,c(2,3)], facets = TRUE) +
xlab("Year") + ylab("") +
ggtitle("Variables influencing Arrests in NYC")
#| code-fold: true
xreg <- cbind(election = dd.ts[,"election"])
auto_model <- auto.arima(dd.ts[,"arrests"], xreg = xreg)
summary(auto_model)
checkresiduals(auto_model)
fit.reg <- lm(arrests ~ election, data = dd)
summary(fit.reg)
res.fit <- ts(residuals(fit.reg), start = c(2006, 1), frequency = 12)
ggtsdisplay(res.fit)
ggtsdisplay(res.fit %>% diff())
ggtsdisplay(res.fit %>% diff() %>% diff(12))
#| code-fold: true
#| code-summary: Fitting Model
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,9*28), nrow=28)
for(p in c(1,2,4)){
for(q in c(1,4)){
for(d in c(0,1)){
for(P in c(1)){
for(Q in c(1,2,3)){
for(D in c(0,1)){
if(p + d + q + P + D + Q<= 9){
tryCatch({
model <- Arima(res.fit, order = c(p, d, q), seasonal = c(P, D, Q))
ls[i,] <- c(p, d, q, P, D, Q, model$aic, model$bic, model$aicc)
}, error = function(err) {
cat()
}, finally = {
i <- i + 1
})
}
}
}
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","P", "D", "Q", "AIC","BIC","AICc")
#| code-fold: true
set.seed(621)
model_output <- capture.output(sarima(res.fit, 1, 1, 1, 1, 0, 1, 12))
#| code-fold: true
model_fit <- Arima(arrests_ts, order = c(1, 1, 1), seasonal = c(1, 0, 1), xreg = dd$election)
plot(res.fit, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("res.fit", "fit1"), fill = 4:1)
#| code-fold: true
# minimum data length for fitting
k <- 48
n <- length(res.fit)
st <- tsp(res.fit)[1] + (k - 2)/12 # ending point: October 2009
rmse1 <- matrix(NA,n-k,12)
rmse2 <- matrix(NA,n-k,12)
for(i in seq(1, n - k, by = 1)) {
tryCatch({
xtrain <- window(res.fit, end = st + i/12)
xtest <- window(res.fit, start = st + (i + 1)/12, end = st + (i + 12)/12)
fit1 <- Arima(xtrain,
order = c(1, 1, 1),
seasonal = c(1, 0, 1),
method = "ML")
fcast1 <- forecast(fit1, h = 12)
fit2 <- Arima(xtrain,
order = c(1, 1, 1),
seasonal = c(0, 1, 1),
method = "ML")
fcast2 <- forecast(fit2, h = 12)
rmse1[i, 1:length(xtest)] <- sqrt((fcast1$mean-xtest)^2)
rmse2[i, 1:length(xtest)] <- sqrt((fcast2$mean-xtest)^2)
}, error = function(err) {
cat()
})
}
plot(1:12, colMeans(rmse1,na.rm=TRUE), type="l", col=2, xlab="horizon", ylab="RMSE")
lines(1:12, colMeans(rmse2,na.rm=TRUE), type="l", col=3, xlab="horizon", ylab="RMSE2")
legend("topleft",legend=c("manual fit","auto fit"),col=2:3,lty=1)
#| code-fold: true
model_fit <- Arima(arrests_ts, order = c(1, 1, 1), seasonal = c(0, 1, 1), xreg = dd$election)
model_fit %>% forecast %>% autoplot()
model_fit %>% forecast %>% autoplot(xreg = forecast(auto.arima(dd$election))$mean)
forecast(auto.arima(dd$election))$mean
election_forecast <- auto.arima(dd$election)
election_forecast <- forecast(auto.arima(dd$election))
model_fit %>% forecast %>% autoplot(xreg = election_forecast$mean)
election_forecast$mean
election_forecast <- forecast(auto.arima(ts(dd$election)))
election_forecast$mean
election_forecast
election_forecast$mean
autoplot(forecast(model_fit, xreg = election_forecast$mean))
election_forecast <- forecast(auto.arima(ts(dd$election)), h = 60)
election_forecast$mean
autoplot(forecast(model_fit, xreg = election_forecast$mean))
summary(model_fit)
model_fit <- Arima(murder_ts, order = c(1, 1, 1), xreg = unrate_ts)
#| code-fold: true
model_fit <- Arima(murder_ts, order = c(1, 1, 1), xreg = unrate_ts)
plot(res.fit, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("res.fit", "fit1"), fill = 4:1)
#| code-fold: true
model_fit <- Arima(murder_ts, order = c(1, 1, 1), xreg = unrate_ts)
plot(murder_ts, col = "blue")
lines(fitted(model_fit), col = "green")
legend(x = "topright", legend = c("res.fit", "fit1"), fill = 4:1)
#| code-fold: true
unrate_forecast <- forecast(auto.arima(unrate_ts))
autoplot(forecast(model_fit, xreg = unrate_forecast$mean))
summary(model_fit)
summary(fit)
#| code-fold: true
month <- as.Date(arrests_by_crime$month)
dd <- data.frame(month, robbery = robbery_ts, unrate = unrate_ts) %>%
rename(robbery = Series.1)
kable(head(dd))
#| code-fold: true
dd.ts <- ts(dd, start = c(2006, 1), frequency = 12)
autoplot(dd.ts[,c(2,3)], facets = TRUE) +
xlab("Year") + ylab("") +
ggtitle("Variables influencing Robbery Arrests in NYC")
#| code-fold: true
VARselect(dd[,c(2,3)], lag.max = 10, type = "both")
#| layout-ncol: 2
#| code-fold: true
summary(vars::VAR(dd[, c(2,3)], p = 1, type = "both"))
summary(vars::VAR(dd[, c(2,3)], p = 3, type = "both"))
#| code-fold: true
#| code-summary: Cross Validation
ts <- ts(dd[,c(2,3)], start = c(2006, 1), frequency = 12)
k <- 72
rmse1 <- matrix(NA, 132, 2)
rmse2 <- matrix(NA, 132, 2)
year <- c()
st <- tsp(ts)[1] + (k - 1)/12
for(i in 1:11) {
xtrain <- window(ts, end=st + i-1)
xtest <- window(ts, start=st + (i-1) + 1/12, end=st + i)
# first model
fit <- VAR(ts, p=1, type='both')
fcast <- predict(fit, n.ahead = 12)
frob<-fcast$fcst$robbery
funr<-fcast$fcst$unrate
ff<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 2 variables
year<-st + (i-1) + 1/12 #starting year
ff<-ts(ff,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
})
# second model
fit2 <- VAR(ts, p=3, type='both')
fcast2 <- predict(fit2, n.ahead = 12)
frob<-fcast2$fcst$robbery
funr<-fcast2$fcst$unrate
ff2<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 3 variables
year<-st + (i-1) + 1/12 #starting year
ff2<-ts(ff2,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
})
}
#| code-fold: true
#| code-summary: Plot Results
yr = rep(c(2012:2022),each =12) #year
m = rep(paste0(1:12),11) #month
rmse1 <- data.frame(yr,m,rmse1)
rmse1$date <- as.Date(paste(rmse1$yr, rmse1$m, "01", sep = "-"))
names(rmse1) <- c("Year", "Month","robbery","unemployment", "Date")
rmse2 <- data.frame(yr,m,rmse2)
rmse2$date <- as.Date(paste(rmse2$yr, rmse2$m, "01", sep = "-"))
names(rmse2) <- c("Year", "Month","robbery","unemployment", "Date")
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = robbery),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = robbery),color = "red") +
labs(
title = "CV RMSE for robbery",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = unemployment),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = unemployment),color = "red") +
labs(
title = "CV RMSE for unemployment",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
mean(rmse1$robbery)
mean(rmse2$robbery)
mean(rmse1$unemployment)
mean(rmse2$unemployment)
#| code-fold: true
fit <- VAR(ts, p = 3, type = "both")
plot(forecast(fit, 24))
summary(fit)
month <- as.Date(arrests_by_crime$month)
dd <- data.frame(month, controlled = controlled_pos_ts, marijuana = marijuana_pos_ts) %>%
rename(controlled = Series.1,
marijuana = Series.1.1)
kable(head(dd))
#| code-fold: true
dd.ts <- ts(dd, start = c(2006, 1), frequency = 12)
autoplot(dd.ts[,c(2,3)], facets = TRUE) +
xlab("Year") + ylab("") +
ggtitle("Controlled Substance and Marijuana Possession Arrests in NYC")
#| code-fold: true
fit <- VAR(ts, p = 6, type = "both")
plot(forecast(fit, 24))
month <- as.Date(arrests_by_crime$month)
dd <- data.frame(month, controlled = controlled_pos_ts, marijuana = marijuana_pos_ts) %>%
rename(controlled = Series.1,
marijuana = Series.1.1)
kable(head(dd))
#| code-fold: true
dd.ts <- ts(dd, start = c(2006, 1), frequency = 12)
autoplot(dd.ts[,c(2,3)], facets = TRUE) +
xlab("Year") + ylab("") +
ggtitle("Controlled Substance and Marijuana Possession Arrests in NYC")
VARselect(dd[,c(2,3)], lag.max = 10, type = "both")
#| layout-ncol: 2
#| code-fold: true
summary(vars::VAR(dd[, c(2,3)], p = 6, type = "both"))
summary(vars::VAR(dd[, c(2,3)], p = 9, type = "both"))
#| code-fold: true
#| code-summary: Cross Validation
ts <- ts(dd[,c(2,3)], start = c(2006, 1), frequency = 12)
k <- 72
rmse1 <- matrix(NA, 132, 2)
rmse2 <- matrix(NA, 132, 2)
year <- c()
st <- tsp(ts)[1] + (k - 1)/12
for(i in 1:11) {
xtrain <- window(ts, end=st + i-1)
xtest <- window(ts, start=st + (i-1) + 1/12, end=st + i)
# first model
fit <- VAR(ts, p=6, type='both')
fcast <- predict(fit, n.ahead = 12)
frob<-fcast$fcst$controlled
funr<-fcast$fcst$marijuana
ff<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 2 variables
year<-st + (i-1) + 1/12 #starting year
ff<-ts(ff,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
})
# second model
fit2 <- VAR(ts, p=9, type='both')
fcast2 <- predict(fit2, n.ahead = 12)
frob<-fcast2$fcst$controlled
funr<-fcast2$fcst$marijuana
ff2<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 3 variables
year<-st + (i-1) + 1/12 #starting year
ff2<-ts(ff2,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
})
}
#| code-fold: true
#| code-summary: Plot Results
yr = rep(c(2012:2022),each =12) #year
m = rep(paste0(1:12),11) #month
rmse1 <- data.frame(yr,m,rmse1)
rmse1$date <- as.Date(paste(rmse1$yr, rmse1$m, "01", sep = "-"))
names(rmse1) <- c("Year", "Month","controlled","marijuana", "Date")
rmse2 <- data.frame(yr,m,rmse2)
rmse2$date <- as.Date(paste(rmse2$yr, rmse2$m, "01", sep = "-"))
names(rmse2) <- c("Year", "Month","controlled","marijuana", "Date")
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = controlled),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = controlled),color = "red") +
labs(
title = "CV RMSE for controlled substance possession",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = marijuana),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = marijuana),color = "red") +
labs(
title = "CV RMSE for marijuana possession",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
mean(rmse1$controlled)
mean(rmse2$controlled)
mean(rmse1$marijuana)
mean(rmse2$marijuana)
#| code-fold: true
fit <- VAR(ts, p = 6, type = "both")
plot(forecast(fit, 24))
summary(fit)
