rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
})
# second model
fit2 <- VAR(ts, p=3, type='both')
fcast2 <- predict(fit2, n.ahead = 12)
frob<-fcast2$fcst$robbery
funr<-fcast2$fcst$unrate
ff2<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 3 variables
year<-st + (i-1) + 1/12 #starting year
ff2<-ts(ff2,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
})
print(c("start", st + (i-1) + 1/12, "end: ", st + i))
}
n
ts <- ts(dd[,c(2,3)], start = c(2012, 1), frequency = 12)
n
ts <- ts(dd[,c(2,3)], start = c(2012, 1), frequency = 12)
n <- length(ts)
k <- 24
rmse1 <- matrix(NA, 132, 2)
rmse2 <- matrix(NA, 132, 2)
year <- c()
st <- tsp(ts)[1] + (k - 1)/12
for(i in 1:10) {
xtrain <- window(ts, end=st + i-1)
xtest <- window(ts, start=st + (i-1) + 1/12, end=st + i)
# first model
fit <- VAR(ts, p=1, type='both')
fcast <- predict(fit, n.ahead = 12)
frob<-fcast$fcst$robbery
funr<-fcast$fcst$unrate
ff<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 2 variables
year<-st + (i-1) + 1/12 #starting year
ff<-ts(ff,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
})
# second model
fit2 <- VAR(ts, p=3, type='both')
fcast2 <- predict(fit2, n.ahead = 12)
frob<-fcast2$fcst$robbery
funr<-fcast2$fcst$unrate
ff2<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 3 variables
year<-st + (i-1) + 1/12 #starting year
ff2<-ts(ff2,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
})
print(c("start", st + (i-1) + 1/12, "end: ", st + i))
}
tsp(ts)[1]
ts <- ts(dd[,c(2,3)], start = c(2006, 1), frequency = 12)
k <- 72
rmse1 <- matrix(NA, 132, 2)
rmse2 <- matrix(NA, 132, 2)
ts <- ts(dd[,c(2,3)], start = c(2006, 1), frequency = 12)
k <- 72
rmse1 <- matrix(NA, 132, 2)
rmse2 <- matrix(NA, 132, 2)
year <- c()
st <- tsp(ts)[1] + (k - 1)/12
for(i in 1:10) {
xtrain <- window(ts, end=st + i-1)
xtest <- window(ts, start=st + (i-1) + 1/12, end=st + i)
# first model
fit <- VAR(ts, p=1, type='both')
fcast <- predict(fit, n.ahead = 12)
frob<-fcast$fcst$robbery
funr<-fcast$fcst$unrate
ff<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 2 variables
year<-st + (i-1) + 1/12 #starting year
ff<-ts(ff,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
})
# second model
fit2 <- VAR(ts, p=3, type='both')
fcast2 <- predict(fit2, n.ahead = 12)
frob<-fcast2$fcst$robbery
funr<-fcast2$fcst$unrate
ff2<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 3 variables
year<-st + (i-1) + 1/12 #starting year
ff2<-ts(ff2,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
})
print(c("start", st + (i-1) + 1/12, "end: ", st + i))
}
ts <- ts(dd[,c(2,3)], start = c(2006, 1), frequency = 12)
k <- 72
rmse1 <- matrix(NA, 132, 2)
rmse2 <- matrix(NA, 132, 2)
year <- c()
st <- tsp(ts)[1] + (k - 1)/12
for(i in 1:11) {
xtrain <- window(ts, end=st + i-1)
xtest <- window(ts, start=st + (i-1) + 1/12, end=st + i)
# first model
fit <- VAR(ts, p=1, type='both')
fcast <- predict(fit, n.ahead = 12)
frob<-fcast$fcst$robbery
funr<-fcast$fcst$unrate
ff<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 2 variables
year<-st + (i-1) + 1/12 #starting year
ff<-ts(ff,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse1[c(a:b),]  <- sqrt((ff-xtest)^2)
})
# second model
fit2 <- VAR(ts, p=3, type='both')
fcast2 <- predict(fit2, n.ahead = 12)
frob<-fcast2$fcst$robbery
funr<-fcast2$fcst$unrate
ff2<-data.frame(frob[,1],funr[,1]) #collecting the forecasts for 3 variables
year<-st + (i-1) + 1/12 #starting year
ff2<-ts(ff2,start=c(year,1),frequency = 12)
a = 12*i-11
b= 12*i
tryCatch({
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
}, error = function(err) {
cat(a, b)
rmse2[c(a:b),]  <- sqrt((ff2-xtest)^2)
})
print(c("start", st + (i-1) + 1/12, "end: ", st + i))
}
View(rmse1)
yr = rep(c(2012:2022),each =12) #year
m = rep(paste0(1:12),11) #month
rmse1 <- data.frame(yr,m,rmse1)
rmse1$date <- as.Date(paste(rmse1$yr, rmse1$m, "01", sep = "-"))
names(rmse1) <- c("Year", "Month","robbery","unemployment", "Date")
rmse2 <- data.frame(yr,m,rmse2)
rmse2$date <- as.Date(paste(rmse2$yr, rmse2$m, "01", sep = "-"))
names(rmse2) <- c("Year", "Month","robbery","unemployment", "Date")
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = robbery),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = robbery),color = "red") +
labs(
title = "CV RMSE for robbery",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = unemployment),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = unemployment),color = "red") +
labs(
title = "CV RMSE for heater",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
mean(rmse1$heater)
mean(rmse2$heater)
mean(rmse1$ice_cream)
mean(rmse2$ice_cream)
View(rmse1)
mean(rmse1$robbery)
mean(rmse2$robbery)
mean(rmse1$unemployment)
mean(rmse2$unemployment)
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = robbery),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = robbery),color = "red") +
labs(
title = "CV RMSE for robbery",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
ggplot() +
geom_line(data = rmse1, aes(x = Date, y = unemployment),color = "blue") +
geom_line(data = rmse2, aes(x = Date, y = unemployment),color = "red") +
labs(
title = "CV RMSE for heater",
x = "Date",
y = "RMSE",
guides(colour=guide_legend(title="Fit")))
mean(rmse1$robbery)
mean(rmse2$robbery)
mean(rmse1$unemployment)
mean(rmse2$unemployment)
fit <- VAR(ts, p = 3, type = "both")
plot(forecast(fit, 24))
library(plotly)
library(caret)
library(car)
library(ggplot2)
library(forecast)
library(gridExtra)
library(tseries)
library(quantmod)
library(fGarch)
# obtain data
cxw <- getSymbols("CXW", auto.assign = FALSE, from = "2006-01-01", to = "2022-12-31")
# obtain data
cxw <- getSymbols("CXW", auto.assign = FALSE, from = "2006-01-01", to = "2022-12-31")
chartSeries(cxw, theme = chartTheme("white"), # Theme
bar.type = "hlc",  # High low close
up.col = "green",  # Up candle color
dn.col = "red")   # Down candle color
library(plotly)
library(caret)
library(car)
library(ggplot2)
library(forecast)
library(gridExtra)
library(tseries)
library(quantmod)
library(fGarch)
# obtain data
cxw <- getSymbols("CXW", auto.assign = FALSE, from = "2006-01-01", to = "2022-12-31")
chartSeries(cxw, theme = chartTheme("white"), # Theme
bar.type = "hlc",  # High low close
up.col = "green",  # Up candle color
dn.col = "red")   # Down candle color
returns <- cxw$CXW.Adjusted %>% diff()
autoplot(returns) + ggtitle("CXW Returns")
grid.arrange(ggAcf(returns),
ggPacf(returns),
ncol = 1)
grid.arrange(ggAcf(returns),
ggPacf(returns),
ncol = 1)
grid.arrange(ggAcf(abs(returns)),
ggPacf(returns^2),
ncol = 1)
library(FinTs)
library(FinTS)
ArchTest(returns, lags = 1, demean = TRUE)
grid.arrange(ggAcf(returns),
ggPacf(returns),
ncol = 1)
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*17), nrow=17)
for(p in c(1, 3)){
for(q in c(1, 3)){
for(d in c(0, 1)){
if(p + d + q <= 8){
model <- Arima(cxw$CXW.Adjusted, order = c(p, d, q), include.drift = FALSE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i +1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*17), nrow=17)
for(p in c(1, 3)){
for(q in c(1, 3)){
for(d in c(0, 1)){
if(p + d + q <= 8){
model <- Arima(cxw$CXW.Adjusted, order = c(p, d, q), include.drift = FALSE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i +1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
arima113 <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE)
arima.res <- arima212$residuals
i <- 1
temp <- data.frame()
ls <- matrix(rep(NA,6*17), nrow=17)
for(p in c(1, 3)){
for(q in c(1, 3)){
for(d in c(0, 1)){
if(p + d + q <= 8){
model <- Arima(cxw$CXW.Adjusted, order = c(p, d, q), include.drift = FALSE)
ls[i,] <- c(p, d, q, model$aic, model$bic, model$aicc)
i <- i +1
}
}
}
}
temp <- as.data.frame(ls)
names(temp) <- c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
arima113 <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE)
arima.res <- arima113$residuals
auto.arima(cxw$CXW.Adjusted)
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(arima.res, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
summary(garch(arima.res, order = c(1, 1), trace = FALSE))
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(arima.res, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
summary(garch(arima.res, order = c(1, 1), trace = FALSE))
summary(garch(arima.res, order = c(1, 7), trace = FALSE))
summary(garch(arima.res, order = c(7, 1), trace = FALSE))
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(arima.res, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
summary(garch(arima.res, order = c(7, 1), trace = FALSE))
summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garchFit(~garch(7, 1), arima.res, trace = FALSE))
summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garchFit(~garch(1, 7), arima.res, trace = FALSE))
summary(garch(arima.res, order = c(1, 7), trace = FALSE))
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(arima.res, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
View(model)
ARCH_AIC <- sapply(model, AIC)
which(ARCH_AIC == min(ARCH_AIC))
model
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
summary(model[[which(ARCH_AIC == min(ARCH_AIC))]])
summary(garch(arima.res, order = c(1, 7), trace = FALSE))
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(arima.res, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
summary(model[[which(ARCH_AIC == min(ARCH_AIC))]])
summary(garch(arima.res, order = c(1, 7), trace = FALSE))
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(arima.res, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
summary(model[[which(ARCH_AIC == min(ARCH_AIC))]])
summary(garch(arima.res, order = c(7, 1), trace = FALSE))
# summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garchFit(~garch(1, 7), arima.res, trace = FALSE))
# summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garchFit(~garch(7, 1), arima.res, trace = FALSE))
# summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garchFit(~garch(arima.res, order = c(7, 1), trace = FALSE))
# summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garchFit(~garch(arima.res, order = c(7, 1), trace = FALSE)))
summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garch(arima.res, order = c(7, 1), trace = FALSE))
summary(garchFit(arima.res, order = c(7, 1), trace = FALSE))
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garchFit(~garch(1, 1), arima.res, trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
View(model)
ARCH_AIC <- sapply(model, AIC)
AIC(model)
AIC(model[[1]])
model
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garchFit(~garch(p, q), arima.res, trace = FALSE)
cc <- cc + 1
}
}
grid.arrange(ggAcf(arima.res^2), ggPacf(arima.res^2), ncol = 1)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(arima.res, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
summary(garch(arima.res, order = c(7, 1), trace = FALSE))
summary(arima.fit <- Arima(cxw$CXW.Adjusted, order = c(1, 1, 3), include.drift = FALSE))
summary(final.fit <- garchFit(~garch(1, 7), arima.res, trace = FALSE))
grid.arrange(ggAcf(returns^2),
ggPacf(returns^2))
returns <- na.omit(returns)
model <- list()
cc <- 1
for (p in 1:7) {
for(q in 1:7) {
model[[cc]] <- garch(returns, order = c(q, p), trace = FALSE)
cc <- cc + 1
}
}
ARCH_AIC <- sapply(model, AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
min(ARCH_AIC)
model[[which(ARCH_AIC == min(ARCH_AIC))]]
summary(garch.fit <- garchFit(~garch(3, 1), returns, trace = FALSE))
summary(garch.fit <- garchFit(~garch(1, 3), returns, trace = FALSE))
predict(final.fit, n.ahead = 100, plot = TRUE)
ht <- final.fit@h.t
data <- data.frame(ht, index(bnd))
predict(final.fit, n.ahead = 100, plot = TRUE)
ht <- final.fit@h.t
data <- data.frame(ht, index(cxw))
ggplot(data, aes(x = index(cxw), y = ht)) +
geom_line() +
ylab('Conditional Variance') +
xlab('Date') +
ggtitle("Volatality plot")
predict(final.fit, n.ahead = 100, plot = TRUE, output = FALSE)
predict(final.fit, n.ahead = 100, plot = TRUE, table = FALSE)
?predict
predict(final.fit, n.ahead = 100, plot = TRUE, table = FALSE)
ht <- final.fit@h.t
data <- data.frame(ht, index(cxw))
ggplot(data, aes(x = index(cxw), y = ht)) +
geom_line() +
ylab('Conditional Variance') +
xlab('Date') +
ggtitle("Volatality plot")
